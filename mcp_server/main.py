# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T09:16:10+00:00



import argparse
import json
import os
from datetime import date, datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import (
    BaseSecurity,
    HTTPBasic,
    UnsuportedSecurityStub,
)
from fastapi import Header
from pydantic import PositiveFloat, conint, constr
from starlette.requests import Request

from models import (
    SFX,
    AccessTokenDetails,
    AiIndustry,
    AiObjective,
    Artists,
    AspectRatio,
    AssetHint,
    AssetId,
    AssetType,
    Audio,
    AudioDataList,
    AudioRendersListResults,
    AudioSearchResults,
    AudioUrl,
    AuthorizeResponse,
    BulkImageSearchRequest,
    BulkImageSearchResults,
    CatalogCollection,
    CatalogCollectionDataList,
    CatalogCollectionItemDataList,
    CategoryDataList,
    Collection,
    CollectionCreateRequest,
    CollectionCreateResponse,
    CollectionDataList,
    CollectionId,
    CollectionItemDataList,
    CollectionItemRequest,
    CollectionUpdateRequest,
    ComputerVisionImageCreateResponse,
    Contributor1,
    ContributorCountry,
    ContributorCountry2,
    ContributorProfile,
    ContributorProfileDataList,
    CreateAudioRendersRequest,
    CreateCatalogCollection,
    CreateCatalogCollectionItems,
    DescriptorsListResult,
    DownloadAvailability,
    DownloadHistoryDataList,
    EditorialCategoryResults,
    EditorialContent,
    EditorialContentDataList,
    EditorialImageCategoryResults,
    EditorialImageContentDataList,
    EditorialImageLivefeed,
    EditorialImageLivefeedList,
    EditorialLivefeed,
    EditorialLivefeedList,
    EditorialSearchResults,
    EditorialUpdatedResults,
    EditorialVideoCategoryResults,
    EditorialVideoContent,
    EditorialVideoSearchResults,
    Embed,
    Embed1,
    Embed2,
    Embed3,
    Embed7,
    Embed8,
    Embed9,
    Embed13,
    FeaturedCollection,
    FeaturedCollectionDataList,
    Format3,
    Genre,
    GenreList,
    Id,
    Id1,
    Id3,
    Id4,
    Id5,
    Id6,
    Id7,
    Id8,
    Image,
    ImageCreateRequest,
    ImageCreateResponse,
    ImageDataList,
    ImageSearchResults,
    ImageType,
    ImageType1,
    InstrumentList,
    Instruments1,
    InstrumentsListResult,
    ItemId,
    KeywordDataList,
    Language,
    Library,
    Library2,
    License2,
    License4,
    License5,
    License6,
    License7,
    License8,
    LicenseAudioRequest,
    LicenseAudioResultDataList,
    LicenseEditorialContentRequest,
    LicenseEditorialContentResults,
    LicenseEditorialVideoContentRequest,
    LicenseImageRequest,
    LicenseImageResultDataList,
    LicenseSFXRequest,
    LicenseSFXResultDataList,
    LicenseVideoRequest,
    LicenseVideoResultDataList,
    Model1,
    MoodList,
    Moods,
    OauthAccessTokenResponse,
    Orientation,
    PeopleAge,
    PeopleEthnicity,
    PeopleEthnicity1,
    PeopleEthnicity2,
    PeopleGender,
    Realm,
    RecommendationDataList,
    RedownloadImage,
    RedownloadVideo,
    Region1,
    RemoveCatalogCollectionItems,
    Resolution,
    Resolution2,
    ResponseType,
    SearchEntitiesRequest,
    SearchEntitiesResponse,
    SFXDataList,
    SFXSearchResults,
    SfxUrl,
    Size7,
    Size9,
    Sort1,
    Sort5,
    Sort7,
    Sort9,
    Sort13,
    Sort15,
    Sort19,
    Sort21,
    Sort23,
    Sort25,
    Sort29,
    Sort31,
    Sort35,
    Sort37,
    Sort41,
    Sort43,
    Sort47,
    Sort49,
    SortOrder,
    SubscriptionDataList,
    Suggestions,
    SupplierCode,
    SupplierCode1,
    SupplierCode2,
    SupplierCode3,
    SupplierCode4,
    Tag,
    TestEcho,
    TestValidate,
    Type3,
    Type7,
    Type8,
    UpdateCatalogCollection,
    UpdatedMediaDataList,
    Url,
    UserDetails,
    V2OauthAccessTokenPostRequest,
    Video,
    VideoCollectionItemDataList,
    VideoDataList,
    VideoSearchResults,
    View,
)

app = MCPProxy(
    contact={'x-twitter': 'Shutterstock'},
    description="The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.",
    title='Shutterstock API Explorer',
    version='1.1.32',
    servers=[
        {'description': 'Live server', 'url': 'https://api.shutterstock.com'},
        {
            'description': 'Sandbox server',
            'url': 'https://api-sandbox.shutterstock.com',
        },
    ],
)


@app.get(
    '/v2/ai/audio/descriptors',
    description=""" This endpoint lists the descriptors that you can use in the audio regions in an audio render. """,
    tags=['audio_descriptor_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def list_custom_descriptors(
    render_speed_over: Optional[float] = None,
    band_id: Optional[str] = None,
    band_name: Optional[str] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=100)] = 20,
    id: Optional[Id] = None,
    instrument_name: Optional[str] = None,
    instrument_id: Optional[str] = None,
    tempo: Optional[float] = None,
    tempo_to: Optional[float] = None,
    tempo_from: Optional[float] = None,
    name: Optional[str] = None,
    tag: Optional[str] = None,
):
    """
    List computer audio descriptors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/ai/audio/instruments',
    description=""" This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition. """,
    tags=['audio_descriptor_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def list_custom_instruments(
    id: Optional[Id1] = None,
    per_page: Optional[conint(ge=1, le=100)] = 20,
    page: Optional[conint(ge=1)] = 1,
    name: Optional[str] = None,
    tag: Optional[str] = None,
):
    """
    List computer audio instruments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/ai/audio/renders',
    description=""" This endpoint shows the status of one or more audio renders, including download links for completed audio. """,
    tags=['audio_descriptor_management', 'audio_track_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def fetch_renders(id: Id1):
    """
    Get details about audio renders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/ai/audio/renders',
    description=""" This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours. """,
    tags=[
        'audio_descriptor_management',
        'audio_track_collection_management',
        'audio_track_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_audio_renders(body: CreateAudioRendersRequest):
    """
    Create rendered audio
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/audio',
    description=""" This endpoint lists information about one or more audio tracks, including the description and publication date. """,
    tags=['audio_track_management', 'audio_track_collection_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_track_list(
    id: Id3, view: Optional[View] = 'minimal', search_id: Optional[str] = None
):
    """
    List audio tracks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/audio/collections',
    description=""" This endpoint lists your collections of audio tracks and their basic attributes. """,
    tags=['audio_track_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_track_collection_list(
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=150)] = 100,
    embed: Optional[Embed] = None,
):
    """
    List audio collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/audio/collections',
    description=""" This endpoint creates one or more collections (soundboxes). To add tracks, use `POST /v2/audio/collections/{id}/items`. """,
    tags=['audio_track_collection_management', 'catalog_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_track_collection(body: CollectionCreateRequest):
    """
    Create audio collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/audio/collections/{id}',
    description=""" This endpoint deletes a collection. """,
    tags=['audio_track_collection_management', 'catalog_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_track_collection(id: str):
    """
    Delete audio collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/audio/collections/{id}',
    description=""" This endpoint gets more detailed information about a collection, including the number of items in it and when it was last updated. To get the tracks in collections, use `GET /v2/audio/collections/{id}/items`. """,
    tags=['audio_track_collection_management', 'audio_descriptor_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_track_collection(
    id: str, embed: Optional[Embed1] = None, share_code: Optional[str] = None
):
    """
    Get the details of audio collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/audio/collections/{id}',
    description=""" This endpoint sets a new name for a collection. """,
    tags=['audio_track_collection_management', 'catalog_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def rename_track_collection(id: str, body: CollectionUpdateRequest = ...):
    """
    Rename audio collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/audio/collections/{id}/items',
    description=""" This endpoint removes one or more tracks from a collection. """,
    tags=['audio_track_collection_management', 'audio_track_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_track_collection_items(id: str, item_id: Optional[ItemId] = None):
    """
    Remove audio tracks from collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/audio/collections/{id}/items',
    description=""" This endpoint lists the IDs of tracks in a collection and the date that each was added. """,
    tags=['audio_track_collection_management', 'audio_track_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_track_collection_items(
    id: str,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=150)] = 100,
    share_code: Optional[str] = None,
    sort: Optional[Sort1] = 'oldest',
):
    """
    Get the contents of audio collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/audio/collections/{id}/items',
    description=""" This endpoint adds one or more tracks to a collection by track IDs. """,
    tags=['audio_track_collection_management', 'audio_track_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_track_collection_items(id: str, body: CollectionItemRequest = ...):
    """
    Add audio tracks to collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/audio/genres',
    description=""" This endpoint returns a list of all audio genres. """,
    tags=['audio_genre_mood_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def list_genres(language: Optional[str] = None):
    """
    List audio genres
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/audio/instruments',
    description=""" This endpoint returns a list of all audio instruments. """,
    tags=['audio_descriptor_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def list_instruments(language: Optional[str] = None):
    """
    List audio instruments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/audio/licenses',
    description=""" This endpoint lists existing licenses. You can filter the results according to the track ID to see if you have an existing license for a specific track. """,
    tags=['audio_track_management', 'audio_track_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_track_license_list(
    audio_id: Optional[str] = None,
    license: Optional[str] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=0, le=200)] = 20,
    sort: Optional[Sort1] = 'newest',
    username: Optional[str] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    download_availability: Optional[DownloadAvailability] = 'all',
    team_history: Optional[bool] = False,
):
    """
    List audio licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/audio/licenses',
    description=""" This endpoint gets licenses for one or more tracks. The download links in the response are valid for 8 hours. """,
    tags=['audio_track_management', 'audio_track_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def license_track(
    license: Optional[License2] = None,
    search_id: Optional[str] = None,
    body: LicenseAudioRequest = ...,
):
    """
    License audio tracks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/audio/licenses/{id}/downloads',
    description=""" This endpoint redownloads tracks that you have already received a license for. The download links in the response are valid for 8 hours. """,
    tags=['audio_track_management', 'audio_track_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def download_tracks(id: str):
    """
    Download audio tracks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/audio/moods',
    description=""" This endpoint returns a list of all audio moods. """,
    tags=['audio_genre_mood_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def list_moods(language: Optional[str] = None):
    """
    List audio moods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/audio/search',
    description=""" This endpoint searches for tracks. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. """,
    tags=[
        'audio_track_management',
        'audio_genre_mood_management',
        'audio_track_collection_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_tracks(
    artists: Optional[Artists] = None,
    bpm: Optional[int] = None,
    bpm_from: Optional[int] = None,
    bpm_to: Optional[int] = None,
    duration: Optional[int] = None,
    duration_from: Optional[int] = None,
    duration_to: Optional[int] = None,
    genre: Optional[Genre] = None,
    is_instrumental: Optional[bool] = None,
    instruments: Optional[Instruments1] = None,
    moods: Optional[Moods] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=0, le=500)] = 20,
    query: Optional[str] = None,
    sort: Optional[Sort5] = None,
    sort_order: Optional[SortOrder] = 'desc',
    vocal_description: Optional[str] = None,
    view: Optional[View] = 'minimal',
    fields: Optional[str] = None,
    library: Optional[Library] = 'premier',
    language: Optional[str] = None,
):
    """
    Search for tracks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/audio/{id}',
    description=""" This endpoint shows information about a track, including its genres, instruments, and other attributes. """,
    tags=['audio_track_management', 'audio_track_collection_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_track(id: int, view: Optional[View] = 'full', search_id: Optional[str] = None):
    """
    Get details about audio tracks
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/bulk_search/images',
    description=""" This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the `GET /v2/images/search` endpoint. """,
    tags=[
        'editorial_image_handling',
        'image_management_functions',
        'image_collection_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def bulk_search_images(
    added_date: Optional[date] = None,
    added_date_start: Optional[date] = None,
    aspect_ratio_min: Optional[PositiveFloat] = None,
    aspect_ratio_max: Optional[PositiveFloat] = None,
    aspect_ratio: Optional[PositiveFloat] = None,
    added_date_end: Optional[date] = None,
    category: Optional[str] = None,
    color: Optional[str] = None,
    contributor: Optional[Contributor1] = None,
    contributor_country: Optional[ContributorCountry] = None,
    fields: Optional[str] = None,
    height: Optional[int] = None,
    height_from: Optional[int] = None,
    height_to: Optional[int] = None,
    image_type: Optional[ImageType] = None,
    keyword_safe_search: Optional[bool] = True,
    language: Optional[Language] = None,
    license: Optional[License4] = None,
    model: Optional[Model1] = None,
    orientation: Optional[Orientation] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=0, le=20)] = 20,
    people_model_released: Optional[bool] = None,
    people_age: Optional[PeopleAge] = None,
    people_ethnicity: Optional[PeopleEthnicity] = None,
    people_gender: Optional[PeopleGender] = None,
    people_number: Optional[conint(ge=0, le=4)] = None,
    region: Optional[Region1] = None,
    safe: Optional[bool] = True,
    sort: Optional[Sort7] = 'popular',
    spellcheck_query: Optional[bool] = True,
    view: Optional[View] = 'minimal',
    width: Optional[int] = None,
    width_from: Optional[int] = None,
    width_to: Optional[int] = None,
    body: BulkImageSearchRequest = ...,
):
    """
    Run multiple image searches
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/catalog/collections',
    description=""" This endpoint returns a list of catalog collections. """,
    tags=['catalog_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_collections(
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=2, le=50)] = 20,
    sort: Optional[Sort9] = 'newest',
    shared: Optional[bool] = False,
):
    """
    List catalog collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/catalog/collections',
    description=""" This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use `PATCH /v2/catalog/collections/{collection_id}/items`. """,
    tags=['catalog_collection_management', 'audio_track_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_collection(body: CreateCatalogCollection):
    """
    Create catalog collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/catalog/collections/{collection_id}',
    description=""" This endpoint deletes a catalog collection. It does not remove the assets from the user's account's catalog. """,
    tags=['catalog_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_collection(collection_id: str):
    """
    Delete catalog collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v2/catalog/collections/{collection_id}',
    description=""" This endpoint updates the metadata of a catalog collection. """,
    tags=['catalog_collection_management', 'audio_track_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def update_collection(collection_id: str, body: UpdateCatalogCollection = ...):
    """
    Update collection metadata
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/catalog/collections/{collection_id}/items',
    description=""" This endpoint removes assets from a catalog collection. It does not remove the assets from the user's account's catalog. """,
    tags=['catalog_collection_management', 'audio_track_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_from_collection(
    collection_id: str, body: RemoveCatalogCollectionItems = ...
):
    """
    Remove items from catalog collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/catalog/collections/{collection_id}/items',
    description=""" This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user's account's catalog. """,
    tags=['catalog_collection_management', 'audio_track_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_to_collection(collection_id: str, body: CreateCatalogCollectionItems = ...):
    """
    Add items to catalog collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/catalog/search',
    description=""" This endpoint searches for assets in the account's catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. """,
    tags=['catalog_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_catalog(
    sort: Optional[Sort9] = 'newest',
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=0, le=500)] = 20,
    query: Optional[str] = None,
    collection_id: Optional[CollectionId] = None,
    asset_type: Optional[AssetType] = None,
):
    """
    Search catalogs for assets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/contributors',
    description=""" This endpoint lists information about one or more contributors, including contributor type, equipment they use and other attributes. """,
    tags=['contributor_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        HTTPBasic(name="None"),
    ],
)
def get_contributor_list(id: Id4):
    """
    Get details about multiple contributors
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/contributors/{contributor_id}',
    description=""" This endpoint shows information about a single contributor, including contributor type, equipment they use, and other attributes. """,
    tags=['contributor_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        HTTPBasic(name="None"),
    ],
)
def get_contributor(contributor_id: str):
    """
    Get details about a single contributor
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/contributors/{contributor_id}/collections',
    description=""" This endpoint lists collections based on contributor ID. """,
    tags=['contributor_data_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        HTTPBasic(name="None"),
    ],
)
def get_contributor_collections_list(
    contributor_id: str, sort: Optional[Sort13] = None
):
    """
    List contributors' collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/contributors/{contributor_id}/collections/{id}',
    description=""" This endpoint gets more detailed information about a contributor's collection, including its cover image, timestamps for its creation, and most recent update. To get the items in collections, use GET /v2/contributors/{contributor_id}/collections/{id}/items. """,
    tags=['contributor_data_management', 'catalog_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        HTTPBasic(name="None"),
    ],
)
def get_contributor_collections(contributor_id: str, id: str = ...):
    """
    Get details about contributors' collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/contributors/{contributor_id}/collections/{id}/items',
    description=""" This endpoint lists the IDs of items in a contributor's collection and the date that each was added. """,
    tags=['contributor_data_management', 'audio_track_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        HTTPBasic(name="None"),
    ],
)
def get_contributor_collection_items(
    contributor_id: str,
    id: str = ...,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=50)] = 20,
    sort: Optional[Sort15] = None,
):
    """
    Get the items in contributors' collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/cv/images',
    description=""" This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint. """,
    tags=['image_upload_functionality', 'image_management_functions'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def upload_image(body: ImageCreateRequest):
    """
    Upload images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/cv/keywords',
    description=""" This endpoint returns a list of suggested keywords for a media item that you specify or upload. """,
    tags=['keyword_suggestion_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_keywords(asset_id: AssetId):
    """
    List suggested keywords
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/cv/similar/images',
    description=""" This endpoint returns images that are visually similar to an image that you specify or upload. """,
    tags=['similar_content_retrieval', 'image_management_functions'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_similar_images(
    asset_id: str,
    license: Optional[License5] = ['commercial'],
    safe: Optional[bool] = True,
    language: Optional[Language] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=500)] = 20,
    view: Optional[View] = 'minimal',
):
    """
    List similar images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/cv/similar/videos',
    description=""" This endpoint returns videos that are visually similar to an image that you specify or upload. """,
    tags=['similar_content_retrieval', 'editorial_video_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_similar_videos(
    asset_id: str,
    license: Optional[License6] = ['commercial'],
    safe: Optional[bool] = True,
    language: Optional[Language] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=500)] = 20,
    view: Optional[View] = 'minimal',
):
    """
    List similar videos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/categories',
    description=""" Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to. """,
    tags=['audio_genre_mood_management', 'catalog_collection_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_editorial_categories():
    """
    (Deprecated) List editorial categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/images/categories',
    description=""" This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to. """,
    tags=[
        'catalog_collection_management',
        'editorial_image_handling',
        'video_collection_handling',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def list_editorial_image_categories():
    """
    List editorial categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/images/licenses',
    description=""" This endpoint lists existing editorial image licenses. """,
    tags=['editorial_image_handling', 'image_license_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_editorial_image_license_list(
    image_id: Optional[str] = None,
    license: Optional[str] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=0, le=200)] = 20,
    sort: Optional[Sort15] = 'newest',
    username: Optional[str] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    download_availability: Optional[DownloadAvailability] = 'all',
    team_history: Optional[bool] = False,
):
    """
    List editorial image licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/editorial/images/licenses',
    description=""" This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours. """,
    tags=[
        'audio_track_management',
        'video_license_operations',
        'editorial_video_handling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def license_editorial_images(body: LicenseEditorialContentRequest):
    """
    License editorial content
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/images/livefeeds',
    tags=['editorial_image_handling', 'editorial_video_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_editorial_image_livefeed_list(
    country: str,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=50)] = 20,
):
    """
    Get editorial livefeed list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/images/livefeeds/{id}',
    tags=['editorial_video_handling', 'editorial_image_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_editorial_image_livefeed(id: str, country: str = ...):
    """
    Get editorial livefeed
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/images/livefeeds/{id}/items',
    tags=['editorial_image_handling', 'editorial_video_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_editorial_image_livefeed_items(id: str, country: str = ...):
    """
    Get editorial livefeed items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/images/search',
    description=""" This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to "Alone,Performing" and also specify a `query` parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. """,
    tags=[
        'editorial_image_handling',
        'image_management_functions',
        'catalog_collection_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_editorial_images(
    query: Optional[str] = None,
    sort: Optional[Sort19] = 'relevant',
    category: Optional[str] = None,
    country: str = ...,
    supplier_code: Optional[SupplierCode] = None,
    date_start: Optional[date] = None,
    date_end: Optional[date] = None,
    per_page: Optional[conint(ge=1, le=50)] = 20,
    cursor: Optional[str] = None,
):
    """
    Search editorial images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/images/updated',
    description=""" This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken. """,
    tags=['catalog_collection_management', 'contributor_data_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_updated_editorial_images(
    type: Type3,
    date_updated_start: datetime = ...,
    date_updated_end: datetime = ...,
    date_taken_start: Optional[date] = None,
    date_taken_end: Optional[date] = None,
    cursor: Optional[str] = None,
    sort: Optional[Sort21] = 'newest',
    supplier_code: Optional[SupplierCode1] = None,
    country: str = ...,
    per_page: Optional[conint(ge=100, le=500)] = 500,
):
    """
    List updated content
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/images/{id}',
    description=""" This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in. """,
    tags=['editorial_video_handling', 'editorial_image_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_editorial_image(id: str, country: str = ...):
    """
    Get editorial content details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/editorial/licenses',
    description=""" Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours. """,
    tags=['editorial_image_handling', 'image_license_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def license_editorial_image(body: LicenseEditorialContentRequest):
    """
    (Deprecated) License editorial content
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/livefeeds',
    description=""" Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds. """,
    tags=['editorial_image_handling', 'editorial_video_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_editorial_livefeed_list(
    country: str,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=50)] = 20,
):
    """
    (Deprecated) Get editorial livefeed list
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/livefeeds/{id}',
    description=""" Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed. """,
    tags=['editorial_image_handling', 'editorial_video_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_editorial_livefeed(id: str, country: str = ...):
    """
    (Deprecated) Get editorial livefeed
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/livefeeds/{id}/items',
    description=""" Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items. """,
    tags=['editorial_image_handling', 'editorial_video_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_editorial_livefeed_items(id: str, country: str = ...):
    """
    (Deprecated) Get editorial livefeed items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/search',
    description=""" Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images. """,
    tags=[
        'catalog_collection_management',
        'editorial_image_handling',
        'video_search_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_editorial(
    query: Optional[str] = None,
    sort: Optional[Sort23] = 'relevant',
    category: Optional[str] = None,
    country: str = ...,
    supplier_code: Optional[SupplierCode2] = None,
    date_start: Optional[date] = None,
    date_end: Optional[date] = None,
    per_page: Optional[conint(ge=1, le=50)] = 20,
    cursor: Optional[str] = None,
):
    """
    (Deprecated) Search editorial content
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/updated',
    description=""" Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items. """,
    tags=['catalog_collection_management', 'video_collection_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_updated_editorial_image(
    type: Type3,
    date_updated_start: datetime = ...,
    date_updated_end: datetime = ...,
    date_taken_start: Optional[date] = None,
    date_taken_end: Optional[date] = None,
    cursor: Optional[str] = None,
    sort: Optional[Sort25] = 'newest',
    supplier_code: Optional[SupplierCode3] = None,
    country: str = ...,
    per_page: Optional[conint(ge=100, le=500)] = 500,
):
    """
    (Deprecated) List updated content
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/videos/categories',
    description=""" This endpoint lists the categories that editorial videos can belong to, which are separate from the categories that other types of assets can belong to. """,
    tags=[
        'editorial_video_handling',
        'video_search_management',
        'video_collection_handling',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def list_editorial_video_categories():
    """
    List editorial video categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/videos/licenses',
    description=""" This endpoint lists existing editorial video licenses. """,
    tags=['editorial_video_handling', 'video_license_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_editorial_video_license_list(
    video_id: Optional[str] = None,
    license: Optional[str] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=0, le=200)] = 20,
    sort: Optional[Sort25] = 'newest',
    username: Optional[str] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    download_availability: Optional[DownloadAvailability] = 'all',
    team_history: Optional[bool] = False,
):
    """
    List editorial video licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/editorial/videos/licenses',
    description=""" This endpoint gets licenses for one or more editorial videos. You must specify the country and one or more editorial videos to license. The download links in the response are valid for 8 hours. """,
    tags=['editorial_video_handling', 'video_license_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def license_editorial_video(body: LicenseEditorialVideoContentRequest):
    """
    License editorial video content
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/videos/search',
    description=""" This endpoint searches for editorial videos. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to "Alone,Performing" and also specify a `query` parameter, the results include only videos that match the query and are in both the Alone and Performing categories.  You can also filter search terms out in the `query` parameter by prefixing the term with NOT. """,
    tags=['editorial_video_handling', 'video_search_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_editorial_videos(
    query: Optional[str] = None,
    sort: Optional[Sort29] = 'relevant',
    category: Optional[str] = None,
    country: str = ...,
    supplier_code: Optional[SupplierCode4] = None,
    date_start: Optional[date] = None,
    date_end: Optional[date] = None,
    resolution: Optional[Resolution] = None,
    fps: Optional[float] = None,
    per_page: Optional[conint(ge=1, le=50)] = 20,
    cursor: Optional[str] = None,
):
    """
    Search editorial video content
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/videos/{id}',
    description=""" This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in. """,
    tags=['editorial_video_handling', 'video_search_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_editorial_video(id: str, country: str = ..., search_id: Optional[str] = None):
    """
    Get editorial video content details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/editorial/{id}',
    description=""" Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in. """,
    tags=['editorial_video_handling', 'editorial_image_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_v2_editorial__id(id: str, country: str = ..., search_id: Optional[str] = None):
    """
    (Deprecated) Get editorial content details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images',
    description=""" This endpoint lists information about one or more images, including the available sizes. """,
    tags=[
        'image_management_functions',
        'editorial_image_handling',
        'image_collection_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_image_list(
    id: Id5, view: Optional[View] = 'minimal', search_id: Optional[str] = None
):
    """
    List images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/images',
    description=""" Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the `GET /v2/images/{id}/similar` endpoint. """,
    tags=['image_upload_functionality', 'image_management_functions'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def upload_ephemeral_image(body: ImageCreateRequest):
    """
    Upload ephemeral images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/categories',
    description=""" This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to. """,
    tags=[
        'image_management_functions',
        'image_collection_management',
        'editorial_image_handling',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def list_image_categories(language: Optional[Language] = None):
    """
    List image categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/collections',
    description=""" This endpoint lists your collections of images and their basic attributes. """,
    tags=['image_collection_management', 'image_management_functions'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_image_collection_list(
    embed: Optional[Embed2] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=150)] = 100,
):
    """
    List image collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/images/collections',
    description=""" This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`. """,
    tags=['image_collection_management', 'image_management_functions'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_image_collection(body: CollectionCreateRequest):
    """
    Create image collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/collections/featured',
    description=""" This endpoint lists featured collections of specific types and a name and cover image for each collection. """,
    tags=[
        'image_collection_management',
        'editorial_image_handling',
        'image_management_functions',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_featured_image_collection_list(
    embed: Optional[Embed3] = None,
    type: Optional[Type7] = None,
    asset_hint: Optional[AssetHint] = '1x',
):
    """
    List featured image collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/collections/featured/{id}',
    description=""" This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use `GET /v2/images/collections/featured/{id}/items`. """,
    tags=['image_collection_management', 'editorial_image_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_featured_image_collection(
    id: str, embed: Optional[Embed3] = None, asset_hint: Optional[AssetHint] = '1x'
):
    """
    Get the details of featured image collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/collections/featured/{id}/items',
    description=""" This endpoint lists the IDs of images in a featured collection and the date that each was added. """,
    tags=[
        'image_collection_management',
        'image_management_functions',
        'editorial_image_handling',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_featured_image_collection_items(
    id: str,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=150)] = 100,
):
    """
    Get the contents of featured image collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/images/collections/{id}',
    description=""" This endpoint deletes an image collection. """,
    tags=['image_collection_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_image_collection(id: str):
    """
    Delete image collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/collections/{id}',
    description=""" This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`. """,
    tags=[
        'image_collection_management',
        'image_management_functions',
        'editorial_image_handling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_image_collection(
    id: str, embed: Optional[Embed7] = None, share_code: Optional[str] = None
):
    """
    Get the details of image collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/images/collections/{id}',
    description=""" This endpoint sets a new name for an image collection. """,
    tags=['image_collection_management', 'image_management_functions'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def rename_image_collection(id: str, body: CollectionUpdateRequest = ...):
    """
    Rename image collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/images/collections/{id}/items',
    description=""" This endpoint removes one or more images from a collection. """,
    tags=['image_collection_management', 'image_management_functions'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_image_collection_items(id: str, item_id: Optional[ItemId] = None):
    """
    Remove images from collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/collections/{id}/items',
    description=""" This endpoint lists the IDs of images in a collection and the date that each was added. """,
    tags=[
        'image_collection_management',
        'image_management_functions',
        'editorial_image_handling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_image_collection_items(
    id: str,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=150)] = 100,
    share_code: Optional[str] = None,
    sort: Optional[Sort31] = 'oldest',
):
    """
    Get the contents of image collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/images/collections/{id}/items',
    description=""" This endpoint adds one or more images to a collection by image IDs. """,
    tags=[
        'image_collection_management',
        'image_management_functions',
        'image_upload_functionality',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_image_collection_items(id: str, body: CollectionItemRequest = ...):
    """
    Add images to collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/licenses',
    description=""" This endpoint lists existing licenses. """,
    tags=['image_license_management', 'image_management_functions'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_image_license_list(
    image_id: Optional[constr(pattern=r'^[1-9]\d*$')] = None,
    license: Optional[constr(pattern=r'^.+$')] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=200)] = 20,
    sort: Optional[Sort31] = 'newest',
    username: Optional[str] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    download_availability: Optional[DownloadAvailability] = 'all',
    team_history: Optional[bool] = False,
):
    """
    List image licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/images/licenses',
    description=""" This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours. """,
    tags=[
        'image_license_management',
        'image_management_functions',
        'editorial_image_handling',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def license_images(
    subscription_id: Optional[str] = None,
    format: Optional[Format3] = None,
    size: Optional[Size7] = 'huge',
    search_id: Optional[str] = None,
    body: LicenseImageRequest = ...,
):
    """
    License images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/images/licenses/{id}/downloads',
    description=""" This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours. """,
    tags=['image_management_functions', 'editorial_image_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def download_image(id: str, body: RedownloadImage = ...):
    """
    Download images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/recommendations',
    description=""" This endpoint returns images that customers put in the same collection as the specified image IDs. """,
    tags=[
        'image_management_functions',
        'image_recommendation_services',
        'image_collection_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_image_recommendations(
    id: Id6, max_items: Optional[conint(ge=1, le=500)] = 20, safe: Optional[bool] = True
):
    """
    List recommended images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/search',
    description=""" This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited. """,
    tags=[
        'editorial_image_handling',
        'image_management_functions',
        'catalog_collection_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_images(
    added_date: Optional[date] = None,
    added_date_start: Optional[date] = None,
    aspect_ratio_min: Optional[PositiveFloat] = None,
    aspect_ratio_max: Optional[PositiveFloat] = None,
    aspect_ratio: Optional[PositiveFloat] = None,
    ai_search: Optional[bool] = None,
    ai_labels_limit: Optional[conint(ge=0, le=500)] = 20,
    ai_industry: Optional[AiIndustry] = None,
    ai_objective: Optional[AiObjective] = None,
    added_date_end: Optional[date] = None,
    category: Optional[str] = None,
    color: Optional[str] = None,
    contributor: Optional[Contributor1] = None,
    contributor_country: Optional[ContributorCountry] = None,
    fields: Optional[str] = None,
    height: Optional[int] = None,
    height_from: Optional[int] = None,
    height_to: Optional[int] = None,
    image_type: Optional[ImageType1] = None,
    keyword_safe_search: Optional[bool] = True,
    language: Optional[Language] = None,
    license: Optional[License7] = None,
    model: Optional[Model1] = None,
    orientation: Optional[Orientation] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=0, le=500)] = 20,
    people_model_released: Optional[bool] = None,
    people_age: Optional[PeopleAge] = None,
    people_ethnicity: Optional[PeopleEthnicity1] = None,
    people_gender: Optional[PeopleGender] = None,
    people_number: Optional[conint(ge=0, le=4)] = None,
    query: Optional[str] = None,
    region: Optional[Region1] = None,
    safe: Optional[bool] = True,
    sort: Optional[Sort35] = 'popular',
    spellcheck_query: Optional[bool] = True,
    view: Optional[View] = 'minimal',
    width: Optional[int] = None,
    width_from: Optional[int] = None,
    width_to: Optional[int] = None,
):
    """
    Search for images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/search/suggestions',
    description=""" This endpoint provides autocomplete suggestions for partial search terms. """,
    tags=['keyword_suggestion_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_image_suggestions(query: str, limit: Optional[conint(ge=1, le=25)] = 10):
    """
    Get suggestions for a search term
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/images/search/suggestions',
    description=""" This endpoint returns up to 10 important keywords from a block of plain text. """,
    tags=['keyword_suggestion_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_image_keyword_suggestions(body: SearchEntitiesRequest):
    """
    Get keywords from text
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/updated',
    description=""" This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`. """,
    tags=[
        'image_management_functions',
        'image_collection_management',
        'editorial_image_handling',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_updated_images(
    type: Optional[Type8] = None,
    start_date: Optional[date] = None,
    end_date: Optional[date] = None,
    interval: Optional[str] = '1 HOUR',
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=2000)] = 100,
    sort: Optional[Sort37] = 'newest',
):
    """
    List updated images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/{id}',
    description=""" This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in. """,
    tags=[
        'editorial_image_handling',
        'image_management_functions',
        'image_collection_management',
        'image_license_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_image(
    id: str,
    language: Optional[Language] = None,
    view: Optional[View] = 'full',
    search_id: Optional[str] = None,
):
    """
    Get details about images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/images/{id}/similar',
    description=""" This endpoint returns images that are visually similar to an image that you specify. """,
    tags=[
        'similar_content_retrieval',
        'image_management_functions',
        'image_collection_management',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def list_similar_images(
    id: constr(pattern=r'^([1-9]\d*)|(U[a-zA-Z0-9]+)$'),
    language: Optional[Language] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=500)] = 20,
    view: Optional[View] = 'minimal',
):
    """
    List similar images
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/oauth/access_token',
    description=""" This endpoint returns an access token for the specified user and with the specified scopes. The token does not expire until the user changes their password. The body parameters must be encoded as form data. """,
    tags=['access_control_management', 'user_account_management'],
)
def create_access_token(body: V2OauthAccessTokenPostRequest = None):
    """
    Get access tokens
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/oauth/authorize',
    description=""" This endpoint returns a redirect URI (in the 'Location' header) that the customer uses to authorize your application and, together with POST /v2/oauth/access_token, generate an access token that represents that authorization. """,
    tags=['access_control_management', 'user_account_management'],
)
def authorize(
    client_id: str,
    realm: Optional[Realm] = 'customer',
    redirect_uri: str = ...,
    response_type: ResponseType = ...,
    scope: Optional[str] = 'user.view',
    state: str = ...,
):
    """
    Authorize applications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/sfx',
    description=""" This endpoint shows information about sound effects. """,
    tags=['sound_effect_handling', 'sound_effect_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_sfx_list_details(
    id: Id7,
    view: Optional[View] = 'minimal',
    language: Optional[Language] = None,
    library: Optional[Library2] = None,
    search_id: Optional[str] = None,
):
    """
    List details about sound effects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/sfx/licenses',
    description=""" This endpoint lists existing licenses. """,
    tags=['sound_effect_handling', 'sound_effect_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_sfx_license_list(
    sfx_id: Optional[constr(pattern=r'^[1-9]\d*$')] = None,
    license: Optional[constr(pattern=r'^.+$')] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=200)] = 20,
    sort: Optional[Sort37] = 'newest',
    username: Optional[constr(pattern=r'^.+$')] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    license_id: Optional[constr(pattern=r'^.+$')] = None,
    download_availability: Optional[DownloadAvailability] = 'all',
    team_history: Optional[bool] = False,
):
    """
    List sound effects licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/sfx/licenses',
    description=""" This endpoint licenses sounds effect assets. """,
    tags=['sound_effect_handling', 'sound_effect_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def licenses_s_f_x(body: LicenseSFXRequest):
    """
    License sound effects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/sfx/licenses/{id}/downloads',
    description=""" This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours. """,
    tags=['sound_effect_handling', 'sound_effect_operations'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def download_sfx(id: str):
    """
    Download sound effects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/sfx/search',
    description=""" This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition. """,
    tags=['sound_effect_handling', 'sound_effect_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_s_f_x(
    added_date: Optional[date] = None,
    added_date_start: Optional[date] = None,
    added_date_end: Optional[date] = None,
    duration: Optional[int] = None,
    duration_from: Optional[int] = None,
    duration_to: Optional[int] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=500)] = 20,
    query: Optional[str] = None,
    safe: Optional[bool] = True,
    sort: Optional[Sort41] = 'popular',
    view: Optional[View] = 'minimal',
    language: Optional[Language] = None,
):
    """
    Search for sound effects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/sfx/{id}',
    description=""" This endpoint shows information about a sound effect. """,
    tags=['sound_effect_handling', 'sound_effect_operations'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_sfx_details(
    id: int,
    language: Optional[Language] = None,
    view: Optional[View] = 'minimal',
    library: Optional[Library2] = None,
    search_id: Optional[str] = None,
):
    """
    Get details about sound effects
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/v2/test', tags=['access_control_management'])
def echo(text: Optional[str] = 'ok'):
    """
    Echo text
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/test/validate', tags=['access_control_management', 'user_account_management']
)
def validate(
    id: int,
    tag: Optional[Tag] = None,
    user_agent: Optional[str] = Header(None, alias='user-agent'),
):
    """
    Validate input
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/user',
    tags=['user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_user():
    """
    Get user details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/user/access_token',
    tags=['access_control_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_access_token():
    """
    Get access token details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/user/subscriptions',
    tags=['user_account_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_user_subscription_list():
    """
    List user subscriptions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos',
    description=""" This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews. """,
    tags=['editorial_video_handling', 'video_search_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_video_list(
    id: Id8, view: Optional[View] = 'minimal', search_id: Optional[str] = None
):
    """
    List videos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/categories',
    description=""" This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to. """,
    tags=[
        'video_collection_handling',
        'video_search_management',
        'editorial_video_handling',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def list_video_categories(language: Optional[Language] = None):
    """
    List video categories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/collections',
    description=""" This endpoint lists your collections of videos and their basic attributes. """,
    tags=['video_collection_handling', 'video_search_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_video_collection_list(
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=150)] = 100,
    embed: Optional[Embed8] = None,
):
    """
    List video collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/videos/collections',
    description=""" This endpoint creates one or more collections (clipboxes). To add videos to collections, use `POST /v2/videos/collections/{id}/items`. """,
    tags=['video_collection_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_video_collection(body: CollectionCreateRequest):
    """
    Create video collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/collections/featured',
    description=""" This endpoint lists featured video collections and a name and cover video for each collection. """,
    tags=['video_collection_handling', 'editorial_video_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_featured_video_collection_list(embed: Optional[Embed9] = None):
    """
    List featured video collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/collections/featured/{id}',
    description=""" This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use `GET /v2/videos/collections/featured/{id}/items`. """,
    tags=['video_collection_handling', 'editorial_video_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_featured_video_collection(id: str, embed: Optional[Embed9] = None):
    """
    Get the details of featured video collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/collections/featured/{id}/items',
    description=""" This endpoint lists the IDs of videos in a featured collection and the date that each was added. """,
    tags=['video_collection_handling', 'editorial_video_handling'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_featured_video_collection_items(
    id: str,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=150)] = 100,
):
    """
    Get the contents of featured video collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/videos/collections/{id}',
    description=""" This endpoint deletes a collection. """,
    tags=['video_collection_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_video_collection(id: str):
    """
    Delete video collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/collections/{id}',
    description=""" This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items. """,
    tags=['video_collection_handling', 'editorial_video_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_video_collection(
    id: str, embed: Optional[Embed13] = None, share_code: Optional[str] = None
):
    """
    Get the details of video collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/videos/collections/{id}',
    description=""" This endpoint sets a new name for a collection. """,
    tags=['video_collection_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def rename_video_collection(id: str, body: CollectionUpdateRequest = ...):
    """
    Rename video collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/v2/videos/collections/{id}/items',
    description=""" This endpoint removes one or more videos from a collection. """,
    tags=['video_collection_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_video_collection_items(id: str, item_id: Optional[ItemId] = None):
    """
    Remove videos from collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/collections/{id}/items',
    description=""" This endpoint lists the IDs of videos in a collection and the date that each was added. """,
    tags=['video_collection_handling', 'video_search_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_video_collection_items(
    id: str,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=150)] = 100,
    share_code: Optional[str] = None,
    sort: Optional[Sort43] = 'oldest',
):
    """
    Get the contents of video collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/videos/collections/{id}/items',
    description=""" This endpoint adds one or more videos to a collection by video IDs. """,
    tags=['video_collection_handling', 'editorial_video_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def add_video_collection_items(id: str, body: CollectionItemRequest = ...):
    """
    Add videos to collections
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/licenses',
    description=""" This endpoint lists existing licenses. """,
    tags=[
        'video_license_operations',
        'editorial_video_handling',
        'video_search_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_video_license_list(
    video_id: Optional[constr(pattern=r'^[1-9]\d*$')] = None,
    license: Optional[constr(pattern=r'^.+$')] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=200)] = 20,
    sort: Optional[Sort43] = 'newest',
    username: Optional[str] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    download_availability: Optional[DownloadAvailability] = 'all',
    team_history: Optional[bool] = False,
):
    """
    List video licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/videos/licenses',
    description=""" This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours. """,
    tags=[
        'editorial_video_handling',
        'video_license_operations',
        'video_search_management',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def license_videos(
    subscription_id: Optional[str] = None,
    size: Optional[Size9] = 'web',
    search_id: Optional[str] = None,
    body: LicenseVideoRequest = ...,
):
    """
    License videos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v2/videos/licenses/{id}/downloads',
    description=""" This endpoint redownloads videos that you have already received a license for. """,
    tags=[
        'editorial_video_handling',
        'video_search_management',
        'video_license_operations',
    ],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def download_videos(id: str, body: RedownloadVideo = ...):
    """
    Download videos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/search',
    description=""" This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. """,
    tags=[
        'video_search_management',
        'editorial_video_handling',
        'video_collection_handling',
    ],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def search_videos(
    added_date: Optional[date] = None,
    added_date_start: Optional[date] = None,
    added_date_end: Optional[date] = None,
    aspect_ratio: Optional[AspectRatio] = None,
    category: Optional[str] = None,
    contributor: Optional[Contributor1] = None,
    contributor_country: Optional[ContributorCountry2] = None,
    duration: Optional[int] = None,
    duration_from: Optional[int] = None,
    duration_to: Optional[int] = None,
    fps: Optional[float] = None,
    fps_from: Optional[float] = None,
    fps_to: Optional[float] = None,
    keyword_safe_search: Optional[bool] = True,
    language: Optional[Language] = None,
    license: Optional[License8] = None,
    model: Optional[Model1] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=0, le=500)] = 20,
    people_age: Optional[PeopleAge] = None,
    people_ethnicity: Optional[PeopleEthnicity2] = None,
    people_gender: Optional[PeopleGender] = None,
    people_number: Optional[conint(ge=0, le=4)] = None,
    people_model_released: Optional[bool] = None,
    query: Optional[str] = None,
    resolution: Optional[Resolution2] = None,
    safe: Optional[bool] = True,
    sort: Optional[Sort47] = 'popular',
    view: Optional[View] = 'minimal',
):
    """
    Search for videos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/search/suggestions',
    description=""" This endpoint provides autocomplete suggestions for partial search terms. """,
    tags=['keyword_suggestion_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_video_suggestions(query: str, limit: Optional[conint(ge=1, le=25)] = 10):
    """
    Get suggestions for a search term
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/updated',
    description=""" This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show videos that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`. """,
    tags=['editorial_video_handling', 'video_search_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_updated_videos(
    start_date: Optional[date] = None,
    end_date: Optional[date] = None,
    interval: Optional[str] = '1 HOUR',
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=2000)] = 100,
    sort: Optional[Sort49] = 'newest',
):
    """
    List updated videos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/{id}',
    description=""" This endpoint shows information about a video, including URLs to previews and the sizes that it is available in. """,
    tags=['editorial_video_handling', 'video_search_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_video(
    id: str,
    language: Optional[Language] = None,
    view: Optional[View] = 'full',
    search_id: Optional[str] = None,
):
    """
    Get details about videos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v2/videos/{id}/similar',
    description=""" This endpoint searches for videos that are similar to a video that you specify. """,
    tags=['similar_content_retrieval', 'video_search_management'],
    security=[
        HTTPBasic(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def find_similar_videos(
    id: str,
    language: Optional[Language] = None,
    page: Optional[conint(ge=1)] = 1,
    per_page: Optional[conint(ge=1, le=500)] = 20,
    view: Optional[View] = 'minimal',
):
    """
    List similar videos
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
